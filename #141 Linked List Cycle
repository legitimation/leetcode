Difference between "is" and "==", is compares the object, == compares the value 

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def hasCycle(self, head: ListNode) -> bool:
        p1 = p2 = head
        while p1 and p2 and p2.next :
            p1 = p1.next
            p2 = p2.next.next
            if p1 is p2:
                return True
        return False

## Try except statement 

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def hasCycle(self, head: ListNode) -> bool:
        try:
            p1 = head
            p2 = head.next
            while p1 is not p2:
                p1 = p1.next
                p2 = p2.next.next
            return True
        except:
            return False

# using hash map

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def hasCycle(self, head: ListNode) -> bool:
        seen = []
        while head != None:
            if head in seen:
                return True
            else:
                seen.append(head)
            head = head.next
        return False
        
