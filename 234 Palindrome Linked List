# compare w reverse (too slow)

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def isPalindrome(self, head: ListNode) -> bool:
        if not head:
            return True
        reverse = ListNode(head.val)
        reverse.next = None
        a = head
        while head.next:
            temp = ListNode(head.next.val)
            temp.next = reverse
            head = head.next
            reverse = temp
        
        while reverse.next:
            if reverse.val == a.val:
                reverse, a = reverse.next, a.next
            else:
                return False
        return True

# list the values of the node and then compare w reverse list
class Solution:
    def isPalindrome(self, head: ListNode) -> bool:
        vals = []
        while head:
            vals += head.val,
            head = head.next
        return vals == vals[::-1]

# Use two pointers, one that moves two blocks, one that moves one, by using this find the mid point of the linked list, then flip the latter half (reverse linked list Q for ref)
# then compare whether the latter half equals the first half by comparison
# Highly impressive.

class Solution:
    def isPalindrome(self, head: ListNode) -> bool:
        fast = slow = head
        while fast and fast.next:
            fast = fast.next.next
            slow = slow.next
        prev = None
        while slow:
            nxt = slow.next
            slow.next = prev
            prev = slow
            slow = nxt
        while prev and head:
            if prev.val != head.val:
                return False
            prev, head = prev.next, head.next
        return True


