# compare w reverse (too slow)

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def isPalindrome(self, head: ListNode) -> bool:
        if not head:
            return True
        reverse = ListNode(head.val)
        reverse.next = None
        a = head
        while head.next:
            temp = ListNode(head.next.val)
            temp.next = reverse
            head = head.next
            reverse = temp
        
        while reverse.next:
            if reverse.val == a.val:
                reverse, a = reverse.next, a.next
            else:
                return False
        return True

# list the values of the node and then compare w reverse list
class Solution:
    def isPalindrome(self, head: ListNode) -> bool:
        vals = []
        while head:
            vals += head.val,
            head = head.next
        return vals == vals[::-1]

