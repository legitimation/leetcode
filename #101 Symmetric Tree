Recursion using binary tree node


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSymmetric(self, root: TreeNode) -> bool:
        if root == None:
            return True
        else:
            return self.mir(root.left, root.right)
    def mir(self, t1: TreeNode, t2: TreeNode) -> bool:
        if (t1 == None) and (t2 == None):
            return True
        elif (t1 == None) or (t2 == None):
            return False
        if t1.val == t2.val:
            return (self.mir(t1.left, t2.right) and self.mir(t1.right, t2.left))
        else:
            return False




Iteration using stack

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSymmetric(self, root: TreeNode) -> bool:
        if root == None:
            return True
        stack = [[root.left, root.right]]
        while len(stack) > 0:
            pair = stack.pop(0)
            left = pair[0]
            right = pair[1]
            if left is None and right is None:
                continue
            if left is None or right is None:
                return False
            if (left.val == right.val):
                stack.insert(0, [left.left, right.right])
                stack.insert(0, [left.right, right.left])
            else:
                return False
        return True
        
        
