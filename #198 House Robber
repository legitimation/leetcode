class Solution:
    def rob(self, nums: List[int]) -> int:
        dp = [0] * len(nums)
        if not nums:
            return 0
        dp[0] = nums[0]
        if len(nums) == 1:
            return nums[0]
        dp[1] = max(nums[0], nums[1])
        if len(nums) == 2:
            return max(nums[0], nums[1])
        for i in range(2, len(nums)):
            dp[i] = max(dp[i-2] + nums[i], dp[i-1])
        return max(dp[-1], dp[-2])

class Solution:
    def rob(self, nums):
        last, now = 0, 0
        for i in nums: last, now = now, max(last + i, now)       
        return now

class Solution:
    def rob(self, nums: List[int]) -> int:
        a, b = 0, 0
        for i in nums:
            a, b = b, max(a + i, b)
        return b
        


