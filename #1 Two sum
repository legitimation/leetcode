https://leetcode.com/problems/two-sum/
#1 Two Sum
=====================================================================================================================================================================
- Brute Force Approach (Python) #try all cases using two for loop

class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        for i in range(len(nums)):
            for j in range(i+1, len(nums)):
                if nums[j] == target - nums[i]:
                    return [i,j]
=====================================================================================================================================================================
- Two pass Hash table #initially make an hash table and then search whether the according value is in the table (one for loop used only)

class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        table = {}
        for index, val in enumerate (nums):
            table[val] = index
        for i in range(len(nums)):
            if target - nums[i] in table.keys():
                if i != table[target-nums[i]]:
                   return [i, table[target-nums[i]]]

=====================================================================================================================================================================
- One pass Hash table #Make an hash table along the process of searching (one for loop used, more efficient than two pass hash case tho)

class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        table = {}
        for index, val in enumerate (nums):
            if target-val in table:
                return table[target-val], index
            table[val] = index
=====================================================================================================================================================================
